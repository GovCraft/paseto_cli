name: Release and Publish

on:
  workflow_dispatch

env:
  CARGO_TERM_COLOR: always

jobs:
  extract-version:
    name: Extract Version
    runs-on: ubuntu-latest
    outputs:
      cargo_version: ${{ steps.extract.outputs.cargo_version }}
    steps:
      - uses: actions/checkout@v4
      - name: Extract version from Cargo.toml
        id: extract
        run: |
          version=$(grep '^version =' Cargo.toml | sed 's/version = "//' | sed 's/"//')
          echo "Extracted version: $version"
          if [ -z "$version" ]; then
            echo "Error: Version is blank."
            exit 1
          fi
          echo "cargo_version=$version" >> $GITHUB_ENV
          echo "::set-output name=cargo_version::$version"
  build-linux:
    name: Build for Linux
    runs-on: ubuntu-latest
    needs: extract-version
    env:
      CARGO_VERSION: ${{ needs.extract-version.outputs.cargo_version }}
    steps:
      - name: Fail if version is blank
        run: |
          if [ -z "$CARGO_VERSION" ]; then
            echo "Error: CARGO_VERSION is blank."
            exit 1
          fi
          echo "Cargo version is $CARGO_VERSION"
      - uses: actions/checkout@v3
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-unknown-linux-gnu
          override: true
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target x86_64-unknown-linux-gnu
      - name: Package Binary
        run: |
          cd target/x86_64-unknown-linux-gnu/release
          tar -czf paseto_cli-linux-x64.tar.gz paseto_cli
          mv paseto_cli-linux-x64.tar.gz ../../../
      - name: Upload Binary
        uses: actions/upload-artifact@v3
        with:
          name: paseto_cli-linux-x64
          path: paseto_cli-linux-x64.tar.gz

  build-macos:
    name: Build for macOS
    runs-on: macos-latest
    needs: extract-version
    env:
      CARGO_VERSION: ${{ needs.extract-version.outputs.cargo_version }}
    strategy:
      matrix:
        target: [x86_64-apple-darwin, aarch64-apple-darwin]
    steps:
      - name: Fail if version is blank
        run: |
          if [ -z "$CARGO_VERSION" ]; then
            echo "Error: CARGO_VERSION is blank."
            exit 1
          fi
          echo "Cargo version is $CARGO_VERSION"
      - uses: actions/checkout@v3
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}
      - name: Package Binary
        run: |
          cd target/${{ matrix.target }}/release
          tar -czf paseto_cli-darwin-${{ matrix.target == 'x86_64-apple-darwin' && 'x64' || 'arm64' }}.tar.gz paseto_cli
          mv paseto_cli-darwin-${{ matrix.target == 'x86_64-apple-darwin' && 'x64' || 'arm64' }}.tar.gz ../../../
      - name: Upload Binary
        uses: actions/upload-artifact@v3
        with:
          name: paseto_cli-darwin-${{ matrix.target == 'x86_64-apple-darwin' && 'x64' || 'arm64' }}
          path: paseto_cli-darwin-${{ matrix.target == 'x86_64-apple-darwin' && 'x64' || 'arm64' }}.tar.gz

  build-windows:
    name: Build for Windows
    runs-on: windows-latest
    needs: extract-version
    env:
      CARGO_VERSION: ${{ needs.extract-version.outputs.cargo_version }}
    steps:
      - name: Fail if version is blank
        shell: powershell
        run: |
          if (-not $env:CARGO_VERSION) {
          Write-Error "Error: CARGO_VERSION is blank."
          exit 1
          }
          Write-Host "Cargo version is $env:CARGO_VERSION"
      - uses: actions/checkout@v3
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-pc-windows-msvc
          override: true
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target x86_64-pc-windows-msvc
      - name: Package Binary
        run: |
          cd target/x86_64-pc-windows-msvc/release
          7z a -r paseto_cli-win32-x64.zip paseto_cli.exe
          move paseto_cli-win32-x64.zip ../../../
      - name: Upload Binary
        uses: actions/upload-artifact@v3
        with:
          name: paseto_cli-win32-x64
          path: paseto_cli-win32-x64.zip

  create-release:
    needs: [ build-linux, build-windows, extract-version ]
    runs-on: ubuntu-latest
    steps:
      - name: Fail if version is blank
        run: |
          if [ -z "${{ needs.extract-version.outputs.cargo_version }}" ]; then
            echo "Error: Version is blank."
            exit 1
          fi
          echo "Cargo version is ${{ needs.extract-version.outputs.cargo_version }}"
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: .
      - name: Create Release and Upload Release Assets
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          tag_name: v${{ needs.extract-version.outputs.cargo_version }}
          release_name: Release ${{ needs.extract-version.outputs.cargo_version }}
          draft: false
          prerelease: false
          token: ${{ secrets.RELEASE_TOKEN }}
          files: |
            *.tar.gz
            *.zip

  publish-npm:
    needs: [ create-release, extract-version ]
    runs-on: ubuntu-latest
    steps:
      - name: Fail if version is blank
        run: |
          if [ -z "${{ needs.extract-version.outputs.cargo_version }}" ]; then
            echo "Error: CARGO_VERSION is blank."
            exit 1
          fi
          echo "Cargo version is ${{ needs.extract-version.outputs.cargo_version }}"
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
      - name: Update package.json version
        run: |
          current_version=$(node -p "require('./package.json').version")
          if [ "$current_version" != "${{ needs.extract-version.outputs.cargo_version }}" ]; then
            npm version ${{ needs.extract-version.outputs.cargo_version }} --no-git-tag-version
            echo "Version updated from $current_version to ${{ needs.extract-version.outputs.cargo_version }}"
          else
            echo "Version is already $current_version, no update needed"
          fi
      - name: Install dependencies
        env:
          BINARY_DISTRIBUTION_VERSION: ${{ needs.extract-version.outputs.cargo_version }}
        run: |
          npm install
          npm ci
      - name: Publish Linux x64 Binary
        run: |
          mkdir -p paseto_cli-linux-x64/bin
          tar -xzf paseto_cli-linux-x64.tar.gz -C paseto_cli-linux-x64/bin
          cd paseto_cli-linux-x64
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Publish macOS x64 Binary
        run: |
          mkdir -p paseto_cli-darwin-x64/bin
          tar -xzf paseto_cli-darwin-x64.tar.gz -C paseto_cli-darwin-x64/bin
          cd paseto_cli-darwin-x64
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Publish macOS arm64 Binary
        run: |
          mkdir -p paseto_cli-darwin-arm64/bin
          tar -xzf paseto_cli-darwin-arm64.tar.gz -C paseto_cli-darwin-arm64/bin
          cd paseto_cli-darwin-arm64
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Publish Windows x64 Binary
        run: |
          mkdir -p paseto_cli-windows-x64/bin
          unzip paseto_cli-win32-x64.zip -d paseto_cli-windows-x64/bin
          cd paseto_cli-windows-x64
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
